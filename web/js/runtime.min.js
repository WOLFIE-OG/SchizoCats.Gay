const baseUrl = "https://schizocats.wolfieog.xyz";
const catPlayerNearly = document.getElementById("cat_player_nearly");
const catViewCount = document.getElementById("cat_view_count");
const copyDirectCat = document.getElementById("copy_direct_cat_url");
const copyCat = document.getElementById("copy_cat_url");
const dropZone = document.getElementById("drop_zone");
const files = [];
const loading = document.getElementById("loading_animation");
const mainSection = document.getElementById("main_section");
const mainSectionButtons = document.getElementById("main_section_buttons");
const nextCat = document.getElementById("next_cat_video");
const player = document.getElementById("cat_player_actual");
let responseUrl = null;
const uploadFiles = document.getElementById("upload_files");
const uploadInput = document.getElementById("upload_input");
const uploadInputText = document.getElementById("upload_input_text");
const uploadSection = document.getElementById("upload_section");
const uploadSectionButtons = document.getElementById("upload_section_buttons");
const videoCount = document.getElementById("video_count");

// Functions

async function getSetMedia(url) {
    catPlayerNearly.style.display = "none";
    loading.style.display = "";
    
    try {
        const response = await fetch(url);
        
        if (response.ok) {
            const responseData = await response.json();
            responseUrl = `web/content/${responseData.file_id}.${responseData.ext}`;
            player.dataset.fileId = responseData.file_id;
            window.history.pushState({}, '', responseData.file_id);
            player.src = responseUrl.replace(/['"]+/g, "");
            player.play();
            catViewCount.innerText = responseData.views;
            catPlayerNearly.style.display = "";
            loading.style.display = "none";
        } else {
            console.error(response.statusText);
            toastr.error("There was an error.", "Error Fetching Cat 🙁!");
        }
    } catch (error) {
        console.error(error);
        toastr.error("An error occurred while fetching the cat 🙁!");
    }
}

async function getCount() {
    try {
        const response = await fetch("api/get_count");
        
        if (response.ok) {
            const responseData = await response.json();
            videoCount.innerText = responseData.count;
        } else {
            console.error(response.statusText);
        }
    } catch (error) {
        console.error(error);
    }
}

function changeToHome() {
    uploadSection.hidden = true;
    uploadSectionButtons.hidden = true;
    mainSection.hidden = false;
    mainSectionButtons.hidden = false;
}

function changeToUpload() {
    uploadSection.hidden = false;
    uploadSectionButtons.hidden = false;
    mainSection.hidden = true;
    mainSectionButtons.hidden = true;
}

function meow() {
    const randomMeow = [
        "web/audio/Cat_Meow_1.mp3",
        "web/audio/Cat_Meow_2.mp3",
        "web/audio/Cat_Meow_3.mp3",
        "web/audio/Cat_Meow_4.mp3"
    ];
    
    const audio = new Audio(randomMeow[Math.floor(Math.random() * randomMeow.length)]);
    audio.volume = 0.2;
    audio.play();
}

function mouseDown() {
    const audio = new Audio("web/audio/Mouse_Click_Down.mp3");
    audio.volume = 0.1;
    audio.play();
}

function mouseUp() {
    const audio = new Audio("web/audio/Mouse_Click_Up.mp3");
    audio.volume = 0.1;
    audio.play();
}

function dropHandler(e) {
    e.preventDefault();
    
    if (e.dataTransfer.items) {
        [...e.dataTransfer.items].forEach((item) => {
            if (item.kind === "file") {
                files.push(item.getAsFile());
            }
        });
    } else {
        [...e.dataTransfer.files].forEach((file) => {
            files.push(file);
        });
    }
    
    dropZone.innerText = `Files selected: (${files.length})`;
}

function dragOverHandler(e) {
    e.preventDefault();
}

function playAudio(src) {
    const audio = new Audio(src);
    audio.volume = 0.1;
    audio.play();
}

// Event Listeners

player.addEventListener('volumechange', () => {
    localStorage.setItem("playerVolume", player.volume);
});

document.addEventListener("click", () => {
    if (Math.floor(Math.random() * 10) === 9) {
        meow();
    }
});

document.addEventListener("dblclick", () => {
    const angle = Math.random() * (125 - 55) + 55;
    const spread = Math.random() * (70 - 50) + 50;
    const particleCount = Math.random() * (100 - 50) + 50;
    
    confetti({
        angle,
        spread,
        particleCount,
        origin: { y: Math.random(), x: Math.random() },
    });
    
    const audio = new Audio("web/audio/Confetti.mp3");
    audio.volume = 0.1;
    audio.play();
});

document.addEventListener("mousedown", mouseDown);
document.addEventListener("mouseup", mouseUp);

nextCat.addEventListener("click", () => {
    getSetMedia("api/get_cat");
});

copyDirectCat.addEventListener("click", async () => {
    try {
        await navigator.clipboard.writeText(player.src);
        toastr.info("Copied direct video URL to clipboard!");
        
        toastr.options.onShown = () => playAudio("web/audio/Hi.mp3");
        toastr.options.onHidden = () => playAudio("web/audio/Bye.mp3");
    } catch (error) {
        console.error("Failed to copy URL: ", error);
        toastr.error("Failed to copy URL to clipboard.");
    }
});

copyCat.addEventListener("click", async () => {
    const lastCatId = player.dataset.fileId;
    const catUrl = `${baseUrl}/${lastCatId}`;
    
    try {
        await navigator.clipboard.writeText(catUrl);
        toastr.info("Copied video URL to clipboard!");
        
        toastr.options.onShown = () => playAudio("web/audio/Hi.mp3");
        toastr.options.onHidden = () => playAudio("web/audio/Bye.mp3");
    } catch (error) {
        console.error("Failed to copy URL: ", error);
        toastr.error("Failed to copy URL to clipboard.");
    }
});

uploadFiles.addEventListener("click", async () => {
    if (files.length === 0) {
        toastr.error("Please select files to upload.", "Error!");
        return;
    }
    
    const formData = new FormData();
    for (const file of files) {
        formData.append("files", file);
    }
    
    try {
        const response = await fetch("api/upload", {
            method: "POST",
            body: formData,
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            let errorMessage = `HTTP error! Status: ${response.status}`;
            if (errorData && errorData.message) {
                errorMessage = errorData.message;
            }
            throw new Error(errorMessage);
        }
        
        const data = await response.json();
        if (data.successful !== 0) {
            toastr.success(`[${data.successful} / ${data.total}] files uploaded.`, "Success!");
        } else {
            toastr.error("No new files were uploaded.", "Error!");
        }
        
        files.length = 0;
        dropZone.innerText = "Drag and drop files.";
        getCount();
    } catch (error) {
        console.error("Error uploading files:", error);
        toastr.error(error.message, "Error!");
    }
});

uploadInput.addEventListener("click", async () => {
    try {
        toastr.info(`Attempting to download ${uploadInputText.value}`, "Fetching...");
        
        const response = await fetch(`api/upload/external?url=${encodeURIComponent(uploadInputText.value)}`, {
            method: "GET",
        });
        
        if (!response.ok) {
            if (response.status === 403) {
                const data = await response.json();
                throw new Error(data.msg);
            } else {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
        }
        
        const data = await response.json();
        toastr.success(data.msg, "Success!");
        getCount();
    } catch (error) {
        console.error("Error uploading file:", error);
        toastr.error(error.message, "Error!");
    }
});

window.addEventListener("load", () => {
    if (window.location.pathname === '/') {
        getSetMedia("api/get_cat");
    }
    let vol = localStorage.getItem("playerVolume");
    if (vol === null) {
        player.volume = 0.5;
        localStorage.setItem("playerVolume", player.volume);
    } else {
        player.volume = parseFloat(vol);
    }
    getCount();
    new cursoreffects.rainbowCursor({});
});
